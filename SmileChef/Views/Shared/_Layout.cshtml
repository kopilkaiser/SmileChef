@using SmileChef.Models.DbModels
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SmileChef</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <style>
        div.navbar-collapse ul.navbar-nav li.nav-item ul.dropdown-menu li.dropdown-item:active{
            background-color: transparent;
        }

        div.navbar-collapse ul.navbar-nav li.dropdown ul.dropdown-menu li.dropdown-item:active {
            background-color: transparent;
            color: black;
        }

        .navbar-nav{
            --bs-nav-link-padding-y: 0.25rem;
        }

        .custom-radioBtn{
            margin-top: 3.5px;
            margin-right: 5px;
            width: 15px;
            height: 15px;
        }

        .radio-container{
            height: 2em;
            display: flex;
            align-items: center;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar fixed-top navbar-expand-xl navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Chef" asp-action="Index"><i class="fa fa-bowl-food pe-2 text-primary"></i>SmileChef</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse">
                    <ul class="navbar-nav nav-tabs flex-grow-1 gap-2">
                        <li class="nav-item mt-2 mt-md-0">
                            <a class="nav-link text-dark @(ViewBag.ShowAdminPanel ? "" : "d-none") p-1" asp-area="" asp-controller="Admin" asp-action="Index">Admin Panel</a>
                        </li>                      
                        <li class="nav-item mt-2 mt-md-0">
                            <a class="nav-link text-dark @(ViewBag.CurrentActive == "ChefIndex" ? "active" : "") p-1" asp-area="" asp-controller="Chef" asp-action="Index">Home</a>
                        </li>
                         <li class="nav-item mt-2 mt-md-0">
                            <a class="nav-link text-dark @(ViewBag.CurrentActive == "ViewChefRestaurants" ? "active" : "") p-1" asp-area="" asp-controller="Chef" asp-action="ViewChefRestaurants">Chef Restaurants Locator</a>
                        </li>
                        <li class="nav-item mt-2 mt-md-0">
                            <a class="nav-link text-dark @(ViewBag.CurrentActive == "GetAllChefs" ? "active" : "") p-1" asp-area="" asp-controller="Chef" asp-action="GetAllChefs">View All Chefs</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark @(ViewBag.CurrentActive == "ViewRecipeMarket" ? "active" : "") p-1" asp-controller="Chef" asp-action="ViewRecipeMarket">Recipe Marketplace</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Recipe Prediction
                            </a>
                            <ul id="homeNavButtons" class="dropdown-menu ps-1 pt-1 pb-0 border-0">
                                <li class="dropdown-item p-0 homeNavButton">
                                    <a class="nav-link text-dark p-1 rounded-1 @(ViewBag.CurrentActive == "RecipeSmartAI" ? "active" : "")" asp-controller="Chef" asp-action="RecipeSmartAI">Prediction with Ingredients</a>
                                </li>
                                <li class="dropdown-item p-0 homeNavButton">
                                    <a class="nav-link text-dark p-1 rounded-1 @(ViewBag.CurrentActive == "ImageSmartAI" ? "active" : "")" asp-controller="Chef" asp-action="ImageSmartAI">Prediction with Image</a>
                                </li>                                @* <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#">Something else here</a></li> *@
                            </ul>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Support Center
                            </a>
                            <ul class="dropdown-menu ps-1 pt-1 pb-0 border-0">
                                <li class="dropdown-item p-0">
                                    <a class="nav-link text-dark p-1 rounded-1" asp-action="GetSupportPage" asp-controller="Chef">Submit Issue</a>
                                </li>
                                <li class="dropdown-item p-0" id="homeNavButton">
                                    <a class="nav-link text-dark p-1 rounded-1" asp-action="GetSupportCenter" asp-controller="Chef">My Support Center</a>
                                </li>
                            </ul>
                        </li>
                        <li class="dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                My Account
                            </a>
                            <ul class="dropdown-menu ps-1 pt-1 pb-0 border-0">
                                <li class="dropdown-item p-0">
                                    <a class="nav-link text-dark p-1 rounded-1 @(ViewBag.CurrentActive == "ManageRecipes" ? "active" : "")" asp-controller="Chef" asp-action="ManageRecipes">Manage Recipes</a>
                                </li>
                                <li class="dropdown-item p-0"><a class="nav-link text-dark p-1" id="showAccountBalanceModal" href="#">Top-up Account Balance</a></li>
                                <li class="dropdown-item p-0"><a class="nav-link text-dark p-1 @(ViewBag.CurrentActive == "ManageProfile" ? "active" : "")" asp-action="ManageProfile" asp-controller="Chef">Manage Account</a></li>
                                <li class="dropdown-item p-0"><hr class="dropdown-divider my-0"></li>
                                <li class="dropdown-item p-0">
                                    <a class="nav-link text-dark p-1 rounded-1 @(ViewBag.CurrentActive == "GetRecipeBookmarks" ? "active" : "")" asp-controller="Chef" asp-action="GetRecipeBookmarks">Recipe Bookmark list</a>
                                </li>
                                <li class="dropdown-item p-0"><a class="nav-link text-dark p-1 @(ViewBag.CurrentActive == "ShowOrderHistory" ? "active" : "")" asp-action="ShowOrderHistory" asp-controller="Chef">Order History</a></li>
                                <li class="dropdown-item p-0"><hr class="dropdown-divider my-0"></li>
                                <li class="dropdown-item p-0"><a class="nav-link text-dark p-1" asp-action="LoginPage" asp-controller="Chef">Log Out</a></li>
                            </ul>
                        </li>
                     
                        <li class="nav-item dropdown ms-xl-auto" id="cartLiElement">
                            <a id="anchorOrderDetails" class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="false">
                               Show Order Details
                            </a>
                            <ul class="dropdown-menu dropdown-menu-xl-end drop p-1 border-0 bg-body-tertiary" style="margin-block-start: 0.75rem">
                                <li class="dropdown-item" id="orderDetailsContainer" style="width: min(100vw, 500px)">
                                    @await Html.PartialAsync("_OrderDetailsPartial", new Order())
                                </li>
                            </ul>
                        </li>
                        <li class="dropdown" id="userDetailsLiElem">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Show my Details
                            </a>
                            <ul class="dropdown-menu dropdown-menu-xl-end drop p-1 border-0 bg-body-tertiary" style="margin-block-start: 0.75rem">
                                <li class="dropdown-item"><b class="pe-2">Email:</b> @(ViewBag.CurrentUserEmail ?? "")</li>
                                <li class="dropdown-item"><b class="pe-2">Name:</b> @(ViewBag.CurrentUserName ?? "")</li>
                                <li class="dropdown-item"><b class="pe-2">AccountBalance:</b> <span id="spanAccountBalance">@(string.Format("{0:C2}", ViewBag.CurrentUserBalance))</span></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container container-main pt-5 pt-sm-4 pt-xl-0">
        <main role="main" class="pb-3">
            @RenderBody()
           @*  <div class="bg-black mb-2" style="width:500px; height:500px;"></div>
            <div class="bg-primary mb-2" style="width:500px; height:500px;"></div>
            <div class="bg-success mb-2" style="width:500px; height:500px;"></div> *@
        </main>     
    </div>

    <footer class="border-top footer text-muted d-flex justify-content-center justify-content-lg-start align-items-center gap-2">
        @*  <div class="ps-4">
            <span>
                <a class="btn btn-info" asp-action="GetSupportPage" asp-controller="Chef">Submit Issue</a>
            </span>
            <span>
                <a class="btn btn-info" asp-action="GetSupportCenter" asp-controller="Chef">My Support Center</a>
            </span>
        </div> *@
            <span class="ps-0 ps-lg-4 fs-5">
                &copy; 2024 - <b>SmileChef</b> @* - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a> *@
            </span>
        <span>| Developer: <b>Kopil Kaiser (K2360182)®</b></span>
        <span>| Publisher: <b>Kingston University London®</b></span>
    </footer>

    <div id="loadingSpinnerContainer" style="display:none">
        <div class="loading-spinner">
            <div class="spinner-border text-info spinner-large" role="status">
            
            </div>
            <div class="text-info">
                Recipe AI Loading
            </div>
        </div>
    </div>
    
    <!-- #region: Account TopUp Modal -->
    <div class="modal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" id="accountTopUpBalanceModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Topping up your current Balance</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-column gap-1">
                        <div class="mb-1">Your Current Balance: <b class="text-success fs-5" id="accountBalancePlaceHolder"></b></div>
                        <div>Please choose one of the options to Top-Up:</div>
                        <div class="radio-container">
                            <input class="custom-radioBtn" type="radio" id="balanceOption100" name="balanceOption" value="100" />
                            <label class="fs-5" for="balanceOption100">£100</label>
                        </div>
                        <div class="radio-container">
                            <input class="custom-radioBtn" type="radio" id="balanceOption500" name="balanceOption" value="500" />
                            <label class="fs-5" for="balanceOption500">£500</label>
                        </div>
                        <div class="radio-container">
                            <input class="custom-radioBtn" type="radio" id="balanceOption1000" name="balanceOption" value="1000" style="margin-top: 0.25rem;" />
                            <label class="fs-5" for="balanceOption1000">£1000</label>
                        </div>
                        <div class="radio-container">
                            <input class="custom-radioBtn" type="radio" id="balanceOption2000" name="balanceOption" value="2000" />
                            <label class="fs-5" for="balanceOption2000">£2000</label>
                        </div>
                        <div class="radio-container">
                            <input class="custom-radioBtn" type="radio" id="balanceOptionEnterManually" name="balanceOption" value="Enter manually" />
                            <label class="fs-5" for="balanceOptionEnterManually">Enter Manually £</label>
                            <input class="form-control w-50 ms-2" type="number" min="1" max="999999" id="tbBalance" value="" disabled oninput="validateBalanceTextBox(this)" />
                            <i id="tbBalanceIcon" class="fa-solid fa-exclamation fa-lg ps-2 text-danger d-none"></i>
                        </div>
                        <div class="mt-2">
                            <label b-m5dri511mu="" class="fs-5" for="predictedBalance">£</label>
                            <input class="form-control w-75 d-inline-block" type="text" id="predictedBalance" name="balanceOption" placeholder="Balance will be predicted here" disabled />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="processBalanceTopUp" type="button" class="btn btn-success">Top up Balance</button>
                </div>
            </div>
        </div>
    </div>
    <!-- #endregion: Account TopUp Modal -->

    <!-- #region: Show Cart Quantity Modal -->
    <div class="modal" tabindex="-1" id="showQuantityModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Item Quantity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input id="hfRecipeId" type="hidden" />
                    <div><p>Adding to Cart Item: <span class="fw-bold" id="spanRecipeName"></span></p></div>
                    <div><p>Price: <span id="spanRecipePrice"></span></p></div>
                    <div class="form-group">
                        <label class="form-label" for="tbOrderLineQuantity">Select Quantity: </label>
                        <input class="form-control w-25 d-inline-block" id="tbOrderLineQuantity" type="number" min="1" max="999" step="1" value="" />
                    </div>
                </div>
                <div class="modal-footer">
                    @* <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> *@
                    <button id="btnSaveRecipeToCart" type="button" class="btn btn-primary">Add to Cart</button>
                </div>
            </div>
        </div>
    </div>
    <!-- #endregion: Show Cart Quantity Modal -->

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/js/all.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="~/js/loadGoogleMap.js"></script>  @*Reference: Kaiser 2024, Myself. KingstonUniversity Project: https://github.com/kopilkaiser/BankApplicationKU/tree/master/BankingWebApp*@

    
    <!-- General scripts that need to run across all pages -->
    <script>
        console.log("This script runs before page-specific scripts.");
    </script>
    @await RenderSectionAsync("Scripts", required: false)
    <!-- Scripts that depend on page-specific scripts -->
    <script>

        // #region Code to perform Account TopUp Balance logic
        function validateBalanceTextBox(tbElem){
            let $elem = $(tbElem);
            let currentVal = parseFloat($elem.val());
            let userBalance = parseFloat($('#spanAccountBalance').text().replace('£', '').replace(/,/g, ''));
            console.log(`value of currentVal: ${currentVal}`);

            // this did the trick to stop getting "predictedBalance" textBox showing NaN value
            if (isNaN(currentVal) || $elem.val().trim() === "") {
                $elem.val('');
                currentVal = 0;
            }

            if (currentVal <= 0) {
                
            }else if (currentVal > 999999) {
                Swal.fire({
                    title: "Information",
                    text: "You cannot enter more than 999,999",
                    icon: "warn",
                    focusConfirm: false, // Prevents focusing on the confirm button automatically
                    didClose: () => {
                        $elem.focus(); // Manually focus the input field after the alert is closed
                    }
                });
                $elem.css('color', 'red');
                $('svg#tbBalanceIcon').removeClass('d-none');
                $elem.val('1000000');
            }else{
                $elem.css('color', 'black');
                $('svg#tbBalanceIcon').addClass('d-none');
                $('#predictedBalance').val(currentVal + userBalance);
            }        
        }

        // Show the Account Balance Modal when the trigger is clicked
        $(document).on('click', '#showAccountBalanceModal', function () {
            $('#accountBalancePlaceHolder').text($('#spanAccountBalance').text())
            $('#accountTopUpBalanceModal').modal('show');
        });

        // preventing the Modal to get closed when "Enter" key is pressed while the Swal.fire() is open for invalid input
        // check line:211 validateBalanceTextBox() which fires Swal.fire() on error inputs
        $('#accountTopUpBalanceModal').on('keypress', function (e) {
            if (e.key === "Enter") {
                e.preventDefault(); // Prevents the default behavior of the Enter key
                // Optionally, you can trigger a custom action here
            }
        });

        // Enable the text box if 'Enter manually' option is selected, disable otherwise
        $('input[name="balanceOption"]').on('change', function () {
            let selectedCheckElem = $(this);
            let userBalance = parseFloat($('#spanAccountBalance').text().replace('£', '').replace(/,/g, ''));
            let selectedBalance;
            if (selectedCheckElem.val() === 'Enter manually') {
                $('#tbBalance').prop('disabled', false);
                $('#tbBalance').val('1');
                selectedBalance = parseFloat($('#tbBalance').val());
            } else {
                $('#tbBalance').prop('disabled', true);
                selectedBalance = parseFloat(selectedCheckElem.val());
            }

            // Round the predicted balance to two decimal places
            let predictedBalance = (selectedBalance + userBalance).toFixed(2);
            $('#predictedBalance').val(predictedBalance);
        });

        // Balance top-up process logic
        $('#processBalanceTopUp').click(() => {
            let checkedOption = $('input[name="balanceOption"]:checked').val();
            console.log(`value of checkedOption: ${checkedOption}`);
            let balanceToAdd;

            if (checkedOption === "Enter manually"){
                let $elem = $('#tbBalance');
                balanceToAdd = $('#tbBalance').val();
                if(balanceToAdd === '0'){
                    Swal.fire({
                        title: "Information",
                        text: "Top-up amount needs to be greater than 0",
                        icon: "warn",
                        focusConfirm: false, // Prevents focusing on the confirm button automatically
                        didClose: () => {
                            $elem.focus(); // Manually focus the input field after the alert is closed
                        }
                    });
                    $elem.css('color', 'red');
                    $('svg#tbBalanceIcon').removeClass('d-none');
                    $elem.val('0');
                    return;
                }
            }else{
                balanceToAdd = checkedOption;
            }
            console.log(`value of balanceToAdd: ${balanceToAdd}`)
            // Convert balanceToAdd to float
            let balanceAmount = parseFloat(balanceToAdd);
            // Ensure it's formatted with two decimal places (e.g., 123.00)
            balanceAmount = balanceAmount.toFixed(2);
            // Check if balance is valid (greater than 0 and not NaN)
            if (isNaN(balanceAmount) || balanceAmount === 0.00) {
                Swal.fire({
                    title: "Invalid Balance Operation",
                    html: "Sorry. You cannot top-up £0.00. Increase the balance.",
                    icon: "error"
                })

                return;
            }

            $.ajax({
                type: "POST",
                url: '@Url.Action("AddAmountToBalance")',
                data: { amountToAdd: balanceAmount },
                dataType : "json",
                success : function(response){
                    if (response.success) {
                        console.log(`balance have been updated!`)
                        Swal.fire({
                            title : "Balanced Updated",
                            html : response.message,
                            icon : "success"
                        }).then((result) => {
                            // Assuming response.accountBalance is a number
                            const formattedBalance = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(response.accountBalance);
                            $('#spanAccountBalance').text(`${formattedBalance}`)
                            $('#accountBalancePlaceHolder').text(`${formattedBalance}`)
                            $('#accountTopUpBalanceModal').modal('hide');
                        })                                         
                    } else {
                        console.log(`balance have failed to update!`)
                        Swal.fire({
                            title: "Balanced failed to update",
                            text: response.message,
                            icon: "error"
                        })
                    }
                },
                error: function (xhr, status, error) {
                    let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                    console.log(`Error - ${errorMessage}`)
                    Swal.fire({
                        title: "Error Occurred",
                        text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                        icon: "error"
                    });
                }
            })
        })

        // Show Quantity Selection Modal
        function showQuantityModal(anchorElem) {
            let $anchorElem = $(anchorElem);
            let recipeName = $anchorElem.data('recipe-name');
            let recipePrice = $anchorElem.data('recipe-price');
            let recipeId = $anchorElem.data('recipe-id');

            $('#hfRecipeId').val(recipeId);
            $('#spanRecipeName').text(recipeName);
            $('#spanRecipePrice').text(recipePrice);
            $('#tbOrderLineQuantity').val('1');
            $('#showQuantityModal').modal('show');
        }

        // Removing Existing OrderLine from the Cart
        function removeOrderLine(indexOfOrderLine) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("RemoveOrderLine")',
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                data: { aIndexOfOrderLine: indexOfOrderLine },
                success: function (response) {
                    if (response.success) {
                        $('#orderDetailsContainer').empty().html(response.partialView);
                        Swal.fire({
                            title: "Successful",
                            text: response.message,
                            icon: "success"
                        });
                    } else {
                        console.log(response);
                        Swal.fire({
                            title: "Invalid Operation",
                            text: response.message,
                            icon: "warning"
                        });
                    }
                },
                error: function (xhr, status, error) {
                    let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                    console.log(`Error - ${errorMessage}`)
                    Swal.fire({
                        title: "Error Occurred",
                        text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                        icon: "error"
                    });
                }
            });
        }

        // #region Performing CheckOut of Cart
        $(document).on('click', '#btnCheckoutCart', () => {
            let totalPrice = parseFloat($('#txtTotalPrice').text().replace('£', '').replace(/,/g, ''));
            let totalBalance = $('#spanAccountBalance').text();
            console.log(`value of totalBalance: ${totalBalance}`);
            // Remove the currency symbol and commas, then parse the result as a float
            let currentBalance = parseFloat(totalBalance.replace('£', '').replace(/,/g, ''));
            console.log(`value of currentBalance: ${currentBalance}`);
            if (totalPrice !== 0.00) {
                const formattedBalance = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(currentBalance);
                const formattedTotalPrice = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(totalPrice);
                Swal.fire({
                    title: "Confirmation",
                    html:
                        `
                                    <p class="fs-4 mb-3">Current Balance: <b class="text-success">${formattedBalance}</b></p>
                                    <p class="mb-2 fs-5">Total <b class="text-danger fw-bold">${formattedTotalPrice}</b> will be deducted from your balance</p>
                                    <p class="text-black fw-semibold">Are you sure to place the order?</p>
                                `,
                    icon: "info",
                    showCancelButton: true,
                    confirmButtonText: 'Yes, checkout!',
                    cancelButtonText: 'No, cancel!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // User confirmed, proceed with the AJAX request
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("CheckoutOrder")',
                            dataType: "json",
                            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                            success: function (response) {
                                if (response.success) {
                                    let formattedAccountBalance = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(response.accountBalance);
                                    $('#orderDetailsContainer').empty().html(response.partialView);
                                    $('#spanAccountBalance').text(`${formattedAccountBalance}`)
                                    Swal.fire({
                                        title: "Success",
                                        html: response.message,
                                        icon: "success"
                                    }).then((result) => {
                                        let dropDown = new bootstrap.Dropdown($('#anchorOrderDetails')[0]);
                                        if (result.isConfirmed) {
                                            console.log(`sweetalert was confirmed OK`);
                                            dropDown.hide();
                                        } else if (result.dismiss === Swal.DismissReason.close) {
                                            console.log(`sweetalert was dismissed by clicking outside`);
                                            dropDown.hide();
                                        }
                                    });
                                } else {
                                    console.log(response);
                                    Swal.fire({
                                        title: "Invalid Operation",
                                        text: response.message,
                                        icon: "error"
                                    });
                                }
                            },
                            error: function (xhr, status, error) {
                                let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                                console.log(`Error - ${errorMessage}`)
                                Swal.fire({
                                    title: "Error Occurred",
                                    text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                                    icon: "error"
                                });
                            }
                        });
                    }
                });
            } else {
                Swal.fire({
                    title: "Information",
                    text: "No item has been added yet to checkout",
                    icon: "info"
                })
            }
        });
        // #endregion

        // #region Performing Adding Recipes(OrderLine) to Cart
        $(document).on('click', '#btnSaveRecipeToCart', () => {
            let orderLineQuantity = $('#tbOrderLineQuantity').val();
            let recipeId = $('#hfRecipeId').val();
            $.ajax({
                type: "POST",
                url: '@Url.Action("AddOrderLine")',
                dataType: "json",
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                data: { aRecipeId: recipeId, aQuantity: orderLineQuantity },
                success: function (response) {
                    if (response.success) {
                        //console.log(response);
                        $('#orderDetailsContainer').empty().html(response.partialView);
                        Swal.fire({
                            title: "Successful",
                            text: response.message,
                            icon: "success"
                        });
                        $('#tbOrderLineQuantity').val('1');
                        $('#showQuantityModal').modal('hide');
                    } else {
                        console.log(response);
                        Swal.fire({
                            title: "Invalid Operation",
                            text: response.message,
                            icon: "warning"
                        });
                    }
                },
                error: function (xhr, status, error) {
                    let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                    console.log(`Error - ${errorMessage}`)
                    Swal.fire({
                        title: "Error Occurred",
                        text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                        icon: "error"
                    });
                }
            });
        });
        // #endregion

      
        // Event when document loads and is ready
        $(() => {

            // #region Retrieving the current session Order
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCurrentCart")',
                dataType: "json",
                success: function (response) {
                    if ($.isEmptyObject(response) || !response.partialView) {
                        // If the response is empty or does not contain the partialView property
                        console.log("Cart is empty.");
                        // Swal.fire({
                        //     title: "Information",
                        //     text: "Your cart is currently empty.",
                        //     icon: "info"
                        // });
                    } else {
                        // If the response contains the partialView
                        console.log("Cart has been loaded.");
                        $('#orderDetailsContainer').empty().html(response.partialView);
                    }
                },
                error: function (xhr, status, error) {
                    let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                    console.log(`Error - ${errorMessage}`);
                    Swal.fire({
                        title: "Error Occurred",
                        text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                        icon: "error"
                    });
                }
            });
            // #endregion

            // #region Add Review to Recipe
            $(document).on('submit', '#addReviewForm', function () {
                event.preventDefault();

                var formData = $(this).serialize();
                $.ajax({
                    type: "POST",
                    url: "/Chef/AddReview",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    dataType: "html",
                    data: formData,
                    success: function (response) {
                        $('#reviewMessage').val('');
                        $('#reviewsContainer').html(response);
                        Swal.fire({
                            title: "",
                            text: "Your Review has been posted successfully",
                            icon: "success"
                        })
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.status + ': ' + xhr.statusText;
                        console.log('Error - ' + errorMessage);
                        Swal.fire({
                            title: "Error Occurred",
                            text: errorMessage,
                            icon: "error"
                        });
                    }
                });
            });
            // #endregion

            // #region Delete Review of Current Chef
            $(document).on('click', '#anchorDeleteReview', function () {
                let anchorElem = $(this);
                let reviewId = anchorElem.data('review-id');

                $.ajax({
                    type: "POST",
                    url: "/Chef/DeleteReview",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    dataType: "html",
                    data: { reviewId: reviewId },
                    success: function (response) {
                        $('#reviewMessage').val('');
                        $('#reviewsContainer').html(response);
                        Swal.fire({
                            title: "",
                            text: "Your Review has been deleted successfully",
                            icon: "success"
                        })
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.status + ': ' + xhr.statusText;
                        console.log('Error - ' + errorMessage);
                        Swal.fire({
                            title: "Error Occurred",
                            text: errorMessage,
                            icon: "error"
                        });
                    }
                });
            });
            // #endregion

            // #region Code to hide OrderDetails Navigation button
            // $('#cartLiElement').addClass('d-none');
            // let currentActionValue = '@Url.ActionContext.RouteData.Values["action"]';
            // if (currentActionValue === 'ViewRecipeMarket') {
            //     $('#cartLiElement').removeClass('d-none');
            //     $('#userDetailsLiElem').removeClass('ms-xl-auto');
            // }else{
            //     $('#userDetailsLiElem').addClass('ms-xl-auto');
            // }
            // #endregion
        });
        // #endregion
    </script>
</body>
</html>
