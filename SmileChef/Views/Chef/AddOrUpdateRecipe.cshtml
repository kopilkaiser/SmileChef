@using ChefApp.Models.DbModels
@using SmileChef.Models.DbModels
@model Recipe

@using(Html.BeginForm("SaveRecipe", "Chef", FormMethod.Post, new { @id = "recipeOperationForm"}))
{
    <div class="row gap-3">
        <input id="hfRecipeId" type="hidden" name="RecipeId" value="@Model.RecipeId"/>
        <input id="hfRecipePrice" name="recipePrice" type="hidden"/>
        <div class="col-12">
            <h4>@(Model.RecipeId == 0 ? "Add" : "Update") Recipe</h4>
            <hr class="my-1">
        </div>
        <div class="col-6">
            @Html.TextBoxFor(m => m.Name, "",new { @id = "tbRecipeName", @class="form-control", @placeholder = "Enter your recipe Name", @required = true})
            
        </div>

        <div class="row">
            <div class="w-100 pb-1 lead">
                Select Recipe Type
            </div>
            <div class="col-md-6">
                @Html.DropDownListFor(m => m.RecipeType, new SelectList(new string[] { "Basic", "Premium" }) { }, new { @id = "selectRecipeType", @class = "form-control", @placeholder = "Enter Recipe Name" })
            </div>
            <div class="col-md-4 mt-2 mt-md-0">
                <input id="tbRecipePrice" class="form-control" type="number" min="0.01" max="999.99" step="0.01" value="" placeholder="Enter Recipe Price" required @(Model is PremiumRecipe ? "" : "disabled") />
            </div>
        </div>


        <div class="row border mx-auto px-0 py-2 mt-1 rounded-2">
            <div class="col-12">
                <h5>Add Instructions</h5>
                <hr class="mt-1">
            </div>
            <div class="col-md-5">
                <input class="form-control" id="instructDescription" placeholder="Enter instruction description" />
            </div>
            <div class="col-md-5 mt-2 mt-md-0">
                <input class="form-control" type="number" min="0" max="999" id="instructDuration" placeholder="Enter duration (minutes)"/>
            </div>
            <div class="col-md-12 mt-3">
                <a class="btn btn-secondary btn-sm" id="btnAddInstruct" >Add Instruction</a>
            </div>
        </div>
        <div class="row px-0 py-2 mx-auto">
            <div class="col-md-12">
                <h5>Instruction List</h5>
                <hr class="mt-1">
            </div>
            <div class="col-md-12" id="instructionsListContainer" style="max-height: 300px; overflow-y:scroll;">
                @await Html.PartialAsync("_RecipeInstructionsPartial", Model.Instructions)
            </div>
        </div>
        

        <div class="col-md-4">
            <button class="btn btn-success" type="submit">Save Recipe</button>
            <a class="btn btn-info ms-2" asp-action="ManageRecipes" asp-controller="Chef">Cancel</a>
        </div>
    </div>
}

@section Scripts{
    <script>
        $(() => {

            $(document).on('click', '#instructionsListContainer .deleteInstruction', function () {
                let $anchorElem = $(this);
                let instructIdx = $anchorElem.data('instruction-index');
                console.log(`value of instructIdx: ${instructIdx}`);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DeleteInstruction")',
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    data: { instructionIndex : instructIdx },
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: "Successful",
                                text: response.message,
                                icon: 'success'
                            })
                            $('#instructionsListContainer').empty().html(response.partialView);
                        }
                    },
                    error: function (xhr, status, error) {
                        let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                        console.log(`Error - ${errorMessage}`)
                        Swal.fire({
                            title: "Error Occurred",
                            text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                            icon: "error"
                        });
                    }
                })
            });

            //Submiting the form
            $('#recipeOperationForm').on('submit', function (event) {
                let recipeName = $('#tbRecipeName').val();
                let recipeSelected = $('#selectRecipeType').find(':selected').val();
                let recipePrice = $('#tbRecipePrice').val();
                $('#hfRecipePrice').val(recipePrice);
            })

            $('#selectRecipeType').on('change', function () {
                let valueSelected = $(this).find(':selected').text();
                console.log(`the value of selectRecipeType selected: ${valueSelected}`)
                if (valueSelected === 'Premium') $('#tbRecipePrice').prop('disabled', false);
                else $('#tbRecipePrice').prop('disabled', true);
            });

            // Add Instruction button click handler
            $('#btnAddInstruct').on('click', () =>{
                let instructDesc = $('#instructDescription').val();
                let instructDuration = $('#instructDuration').val();
                if (!instructDesc || !instructDuration) {
                    Swal.fire({
                        title : "Invalid Instruction Addition",
                        html : "Give valid Instruction Description & Duration. <br/>Choose 0 for duration if u don't need to specify time",
                        icon : 'error'
                    })
                    return;
                }

                $.ajax({
                    type : "POST",
                    url : '@Url.Action("AddInstruction")',
                    contentType : "application/x-www-form-urlencoded; charset=UTF-8",
                    data: { description : instructDesc, duration : instructDuration},
                    dataType : "json",
                    success: function (response) {
                        if (response.success) { 
                            Swal.fire({
                                title: "Successful",
                                text: response.message,
                                icon: 'success'
                            }).then((result) => {
                                $('#instructionsListContainer').empty().html(response.partialView);
                                $('#instructDescription').val('').focus();
                                $('#instructDuration').val('')
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        let errorMessage = `${xhr.status} : ${xhr.statusText} : ${xhr.responseText}`;
                        console.log(`Error - ${errorMessage}`)
                        Swal.fire({
                            title: "Error Occurred",
                            text: `An error occurred: ${xhr.statusText}. Please try again later.`,
                            icon: "error"
                        });
                    }
                })
            });
        
        });
    </script>
}