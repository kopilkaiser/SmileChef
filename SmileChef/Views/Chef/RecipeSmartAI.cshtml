@model SmileChef.Models.PredictRecipeViewModel

@{
    ViewData["Title"] = "Recipe Prediction";
}

<style>
    #recipeList span:hover {
        cursor: pointer;
    }
</style>

<div class="row bg-light mt-3 p-2">
    <h2>Please select maximum 5 recipes</h2>
    <div id="recipeList" class="bg-white d-flex flex-wrap gap-3 p-2" style="max-height: 400px; overflow-y: auto;">
    </div>
    <div class="mt-2">
        <input value="Clear Selections" class="btn btn-primary" onclick="clearSelection()" style="width: 150px" />
    </div>
</div>

<div class="row pb-4 mt-3 rounded-2" style="background-color: #f8f9fa;">
    <h2 class="mt-4">Recipe Prediction</h2>

    @* <form asp-action="Predict" method="post">*@
    <form id="predictionForm" method="post">
        <div class="form-group row gap-3 container-md">
            <label asp-for="Ingredients" class="control-label ps-0"></label>
            <input asp-for="Ingredients" class="form-control" id="ingredientsInput" readonly />
            <span asp-validation-for="Ingredients" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" value="Predict" class="btn btn-primary" />
        </div>
    </form>
</div>

<div class="row border border-2 mt-3 p-2 rounded-2">
    <div class="d-flex justify-content-end">
        <input value="Clear Prediction" class="btn btn-primary" onclick="clearPredictions()" style="width:150px;" />
    </div>
    <div class="row gap-1 mt-2 p-2 rounded-2 justify-content-center" id="chatContainer">
    </div>
</div>

<!-- #region: Modal Show Suggested Recipe Details -->
<div class="modal modal-xl fade" id="recipeViewModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="modalRecipeTitle"></h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="recipeViewContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- #endregion -->
@section Scripts {
    <script>
        // #region GLOBAL VARIABLES
        let counter = 0;
        let maxSelection = 5;
        // #endregion

        // #region GLOBAL FUNCTIONS
        // Define the clearPredictions function in the correct scope
        function clearPredictions() {
            //Clear Prediction
            $('#chatContainer').empty();
            counter = 0;
        }

        // clearing the ingredient selections
        function clearSelection() {
            //clear Selection
            $('#ingredientsInput').val("");
            maxSelection = 5;
            // Remove the 'selected' class and reset the background color of all spans
            $('#recipeList span').removeClass('bg-success text-white selected').addClass('bg-info');
            // Scroll the recipeList container to the top
            $('#recipeList').scrollTop(0);
            //In most browsers, the scrollable element for the entire document is not the <body> but the <html> element or sometimes both <html> and <body> together
            //$('html, body').animate({ scrollTop: 0 }, 'slow');
        }
        // #endregion

        // Document when gets ready this is executed
        $(document).ready(function () {
            console.log(`document has loaded`);
            console.log(`value of maxSelection: ${maxSelection}`);
            // #region Prediction FORM
            $('#predictionForm').on('submit', function (event) {
                event.preventDefault();

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Predict", "Chef")',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success === false) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message
                            });
                        } else {    
                            let container = $('<div class="prediction-container row"></div>').hide();
                            let spanElem = $(`<span class="bg-danger text-white text-center col-auto" style="height:25px; width: 25px; border-radius: 12.5px; padding:1px;">${++counter}</span>`);

                            container.append(spanElem);
                            container.append(response);

                            $('#chatContainer').append(container);
                            container.fadeIn('slow'); // Apply fade-in effect

                            $('#ingredientsInput').val("");
                            maxSelection = 5;
                            // Remove the 'selected' class and reset the background color of all spans
                            $('#recipeList span').removeClass('bg-success text-white selected').addClass('bg-info');
                            // Scroll the recipeList container to the top
                            $('#recipeList').scrollTop(0);
                            //In most browsers, the scrollable element for the entire document is not the <body> but the <html> element or sometimes both <html> and <body> together
                            //$('html, body').animate({ scrollTop: 0 }, 'slow');
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while predicting the recipe.'
                        });
                    }
                });
            });

            // Attach a delegated event handler to the document for the dynamically created close buttons
            $(document).on('click', '.btn-close', function () {
                $(this).closest('.prediction-container').remove();
            });

            // #endregion

            // #region Populating recipeList, handling click on each recipe in the recipeList
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetRecipeListJson", "Chef")',
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        for (let recipe of response.recipeList) {
                            let spanElem = $(`<span class="p-2 bg-info rounded-4">${recipe}</span>`)
                            $('#recipeList').append(spanElem);
                        }
                        console.log(response.recipeList)
                    } else {
                        Swal.fire({
                            title: "Error Occurred",
                            text: response.message,
                            icon: "error"
                        });
                    }
                },
                error: function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText;
                    console.log('Error - ' + errorMessage);
                    Swal.fire({
                        title: "Error Occurred",
                        text: errorMessage,
                        icon: "error"
                    });
                }
            });


            $('#recipeList span').each(function () {
                $(this).addClass('p-2 bg-info rounded-4');
            });


            $(document).on('click', '#recipeList span', function () {

                // Check if the ingredient is already selected
                if ($(this).hasClass('selected')) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Ingredient Already Selected',
                        text: 'This ingredient has already been selected.'
                    });
                    return; // Exit the function to prevent duplicate selection
                }

                if (maxSelection > 0) {
                    let ingredientValue = $(this).text();
                    let currentVal = $('#ingredientsInput').val();
                    let appendedVal = "";
                    if (currentVal.length === 0) {
                        console.log(`ingredientsInput value return length 0`);
                        appendedVal = `${ingredientValue}`;
                    } else {
                        appendedVal = `${currentVal}, ${ingredientValue}`;
                    }
                    $('#ingredientsInput').val(appendedVal);

                    // Add visual feedback by changing the background color and marking as selected
                    $(this).removeClass('bg-info').addClass('bg-success text-white selected');
                    maxSelection -= 1;
                    console.log(`appended value: value of maxSelection: ${maxSelection}`);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Maximum Selection reached',
                        text: 'Maximum 5 ingredients can be selected. Please hit "Clear All" to reset.'
                    });
                }
            })
            // #endregion

            // #region handling click on suggested recipes
            $(document).on('click', '#chatContainer .prediction-container #suggestionRecipeContainer span.suggestedRecipe', function () {
                let spanElem = $(this);
                let recipeId = spanElem.data('recipe-id');
                let recipeName = spanElem.data('recipe-name');
                console.log(`recipeName: ${recipeName}, recipeId: ${recipeId}`)
                $.ajax({
                    type : "GET",
                    url: '@Url.Action("GetRecipeViewPartial")',
                    data : {recipeId},
                    dataType : "html",
                    success: function(response){
                        $('#modalRecipeTitle').text(recipeName);
                        $('#recipeViewContainer').empty().html(response);
                        $('#recipeViewModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.status + ': ' + xhr.statusText;
                        console.log('Error - ' + errorMessage);
                        Swal.fire({
                            title: "Error Occurred",
                            text: errorMessage,
                            icon: "error"
                        });
                    }
                });

            });
            // #endregion
        });


    </script>
}
