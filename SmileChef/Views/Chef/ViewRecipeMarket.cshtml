@using ChefApp.Models.DbModels
@using SmileChef.Models.DbModels
@using SmileChef.ViewModels
@model RecipeMarketViewModel

@{

}



<div class="row mb-3 mt-2">
    <div class="col-md-3 mb-2 mb-md-0">
        @Html.DropDownList("SelectRecipeType", new List<SelectListItem>()
        {
                    new SelectListItem(){Text = "Basic", Value="Basic"},
                    new SelectListItem(){Text = "Premium", Value="Premium"}
        }, "Filter By Recipe Type", new {@class="form-select", @onchange="onRecipeTypeChanged(this)"})
    </div>
    <div class="col-md-5 d-flex gap-2">
        <input id="tbSearchRecipeName" class="form-control" type="search" placeholder="Search by Recipe Name" aria-label="Search" oninput="onSearchRecipeName(this)">
    </div>
</div>

<div class="row gy-3 justify-content-center" id="recipeListContainer">
    @{
        await Html.RenderPartialAsync("_RecipeMarketListPartial", Model);
    }
</div>

@section Scripts{
    <script>

        // #region GLOBAL VARIABLES
        let debounceTimeout = null;
        // #endregion

        function onRecipeTypeChanged(selection) {
            let recipeType = $(selection).val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("FilterRecipeMartetByRecipeType")',
                data: { recipeType: recipeType },
                dataType : "html",
                contentType : "application/x-www-form-urlencoded; charset=UTF-8;",
                success: function (response) {
                    $('#recipeListContainer').empty().html(response);
                    Swal.fire({
                        title: "",
                        text: "Recipes have been filtered successfully",
                        icon: "success"
                    })
                },
                error: function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText;
                    console.log('Error - ' + errorMessage);
                    Swal.fire({
                        title: "Error Occurred",
                        text: errorMessage,
                        icon: "error"
                    });
                }
            });
        }

        function onSearchRecipeName(input) {
            // Using debouncer to restrict the frequency of the call made to the server on every input change
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(function () {
                let searchValue = $(input).val();
                console.log(`Search Value: ${searchValue}`)
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("FilterRecipeMartetByRecipeName")',
                    data: { searchedRecipeName: searchValue },
                    dataType: "html",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8;",
                    success: function (response) {
                        $('#recipeListContainer').empty().html(response);
                        // Swal.fire({
                        //     title: "",
                        //     text: "Recipes have been filtered successfully",
                        //     icon: "success"
                        // })
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.status + ': ' + xhr.statusText;
                        console.log('Error - ' + errorMessage);
                        Swal.fire({
                            title: "Error Occurred",
                            text: errorMessage,
                            icon: "error"
                        });
                    }
                });     
            }, 500);
        }

        $(document).ready(function () {
            console.log("Page loaded ViewRecipeMarket.cshtml")
            $(document).on('click', 'div.card-header div.d-flex a[data-recipe-id]', function(){
                let $anchorElem = $(this);
                let recipeId = $anchorElem.data('recipe-id');
                let recipeName = $anchorElem.data('recipe-name');
                console.log(`recipeId: ${recipeId}`);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddOrRemoveRecipeBookmark")',
                    data: { recipeId },
                    success: function (response) {
                        if(response.success){
                            if (response.status === 'added') {
                                Swal.fire({
                                    title : 'Bookmark added',
                                    text: `${recipeName} has been added to Recipe bookmark`,
                                    icon : 'success'
                                })
                                //both approaches below works the same but finding the svg and manipulating it's css is more efficient and safe
                                //$(`a[data-recipe-id=${recipeId}]`).html('<i class="fa fa-bookmark text-primary"></i>');
                                $(`a[data-recipe-id=${recipeId}]`).find('svg').removeClass('text-black').addClass('text-primary');
                            } else if (response.status === 'deleted') {
                                Swal.fire({
                                    title: 'Bookmark deleted',
                                    text: `${recipeName} has been deleted from Recipe bookmark`,
                                    icon: 'success'
                                })
                                //$(`a[data-recipe-id=${recipeId}]`).html('<i class="fa fa-bookmark text-black"></i>');
                                $(`a[data-recipe-id=${recipeId}]`).find('svg').removeClass('text-primary').addClass('text-black');
                            }
                        }else{
                            //Might be the user clicked on premium recipe and need to purchase it
                            //Sweetalert2 (Swal) has the following icons: success, error, warning, info, question
                            Swal.fire({
                                title : "Information",
                                text : "Premium recipe needs to be purchased in order to bookmark",
                                icon : "info"
                            })
                        }
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.status + ': ' + xhr.statusText;
                        console.log('Error - ' + errorMessage);
                        Swal.fire({
                            title: "Error Occurred",
                            text: errorMessage,
                            icon: "error"
                        });
                    }
                });
            })
        });
    </script>
}
        