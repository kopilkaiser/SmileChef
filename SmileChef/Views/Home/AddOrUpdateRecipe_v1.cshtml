@using SmileChef.ViewModels
@model RecipeViewModel

@using (Html.BeginForm("SaveRecipe", "Home", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
{
    @Html.HiddenFor(m => m.RecipeId)
    <div class="container mt-5">
        <div class="row">
            <div class="col-12">
                <h2 class="mb-4">@((Model.RecipeId == 0 ? "Add New Recipe" : "Update Recipe"))</h2>
                <div class="card">
                    <div class="card-body">
                        <div class="mb-3 row">
                            <label class="col-sm-2 col-form-label">@Html.LabelFor(m => m.Name)</label>
                            <div class="col-sm-10">
                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @placeholder = "Enter recipe name" })
                                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <h3 class="mt-4 mb-3">Instructions</h3>
                        <div id="instructionListContainer">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Order</th>
                                        <th>Description</th>
                                        <th>Duration (mins)</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="instructionList">
                                    @for (int i = 0; i < Model.Instructions.Count; i++)
                                    {
                                        <tr>
                                            <td>
                                                @Html.HiddenFor(m => m.Instructions[i].OrderId)
                                                @Html.HiddenFor(m => m.Instructions[i].InstructionId) <!-- Hidden field for InstructionId -->
                                                @Html.HiddenFor(m => m.Instructions[i].IsRemoved) <!-- Hidden field for IsRemoved -->
                                                @Html.TextBoxFor(m => m.Instructions[i].OrderId, new { @class = "form-control", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(m => m.Instructions[i].OrderId)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(m => m.Instructions[i].Description, new { @class = "form-control", @placeholder = "Enter instruction description" })
                                                @Html.ValidationMessageFor(m => m.Instructions[i].Description, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                <input type="number" class="form-control" name="Instructions[@i].Duration" value="@(Model.Instructions[i].Duration.HasValue ? Model.Instructions[i].Duration.Value.TotalMinutes : 0)" placeholder="Enter duration in minutes" />
                                                @Html.ValidationMessageFor(m => m.Instructions[i].Duration, "", new { @class = "text-danger" })
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-danger" onclick="removeInstruction(this)">Remove</button>
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.Instructions.Count == 0)
                                    {
                                        <tr id="noInstructionsMessage">
                                            <td colspan="4">No instructions. Click "Add Instruction" to create one.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <button type="button" class="btn btn-primary mt-3" onclick="showAddInstructionModal()">Add Instruction</button>
                    </div>
                </div>

                <div class="mt-4">
                    <button class="btn btn-success" type="submit">@((Model.RecipeId == 0 ? "Add Recipe" : "Update Recipe"))</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Add Instruction Modal -->
<div class="modal fade" id="addInstructionModal" tabindex="-1" aria-labelledby="addInstructionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addInstructionModalLabel">Add Instruction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="instructionDescription" class="form-label">Description</label>
                    <input type="text" class="form-control" id="instructionDescription" placeholder="Enter instruction description">
                </div>
                <div class="mb-3">
                    <label for="instructionDuration" class="form-label">Duration (mins)</label>
                    <input type="number" min="0" max="60" class="form-control" id="instructionDuration" placeholder="Enter duration in minutes">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="addInstruction()">Add Instruction</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showAddInstructionModal() {
            var modal = new bootstrap.Modal(document.getElementById('addInstructionModal'));
            modal.show();
        }

        function addInstruction() {
            var instructionList = document.getElementById('instructionList');
            var rowCount = instructionList.querySelectorAll('tr:not(#noInstructionsMessage)').length; // Count existing rows excluding the no instructions message row
            var orderIdValue = rowCount + 1; // OrderId should start at 1
            var description = document.getElementById('instructionDescription').value;
            var duration = document.getElementById('instructionDuration').value;

            var newRow = instructionList.insertRow();
            newRow.innerHTML = `
                        <td>
                            <input type="hidden" name="Instructions[` + rowCount + `].OrderId" value="` + orderIdValue + `" />
                            <input type="hidden" name="Instructions[` + rowCount + `].InstructionId" value="0" /> <!-- New instruction has ID 0 -->
                            <input type="hidden" name="Instructions[` + rowCount + `].IsRemoved" value="false" />
                            <input class="form-control" name="Instructions[` + rowCount + `].OrderId" type="text" value="` + orderIdValue + `" readonly />
                        </td>
                        <td>
                            <input class="form-control" name="Instructions[` + rowCount + `].Description" type="text" value="` + description + `" placeholder="Enter instruction description" />
                        </td>
                        <td>
                            <input type="number" class="form-control" name="Instructions[` + rowCount + `].Duration" value="` + duration + `" placeholder="Enter duration in minutes" />
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger" onclick="removeInstruction(this)">Remove</button>
                        </td>
                    `;

            // Hide the "No instructions" message
            var noInstructionsMessage = document.getElementById('noInstructionsMessage');
            if (noInstructionsMessage) {
                noInstructionsMessage.style.display = 'none';
            }

            // Clear modal inputs
            document.getElementById('instructionDescription').value = '';
            document.getElementById('instructionDuration').value = '';

            // Hide the modal
            var modal = bootstrap.Modal.getInstance(document.getElementById('addInstructionModal'));
            modal.hide();

            // Ensure indices are sequential and start at 0
            updateInstructionIndices();
        }

        function removeInstruction(button) {
            var row = button.parentNode.parentNode;
            row.style.display = 'none';
            var isRemovedInput = row.querySelector('input[name$=".IsRemoved"]');
            if (isRemovedInput) {
                isRemovedInput.value = "true";
            }

            // Ensure indices are sequential and start at 0
            updateInstructionIndices();

            // If there are no instructions left, show the "No instructions" message
            var instructionList = document.getElementById('instructionList');
            if (instructionList.querySelectorAll('tr:not([style*="display: none"])').length === 0) { // Only the "No instructions" message row remains
                var noInstructionsMessage = document.getElementById('noInstructionsMessage');
                if (noInstructionsMessage) {
                    noInstructionsMessage.style.display = '';
                }
            }
        }

        function updateInstructionIndices() {
            var instructionList = document.getElementById('instructionList');
            var rows = instructionList.querySelectorAll('tr:not(#noInstructionsMessage):not([style*="display: none"])');
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                row.querySelector('input[name^="Instructions["][name$="].OrderId"]').name = 'Instructions[' + i + '].OrderId';
                row.querySelector('input[name^="Instructions["][name$="].InstructionId"]').name = 'Instructions[' + i + '].InstructionId';
                row.querySelector('input[name^="Instructions["][name$="].Description"]').name = 'Instructions[' + i + '].Description';
                row.querySelector('input[name^="Instructions["][name$="].Duration"]').name = 'Instructions[' + i + '].Duration';
                row.querySelector('input[name^="Instructions["][name$="].IsRemoved"]').name = 'Instructions[' + i + '].IsRemoved';
                row.querySelector('input[name="Instructions[' + i + '].OrderId"]').value = i + 1;
                row.querySelector('input[readonly]').value = i + 1;
            }
        }
    </script>
}
