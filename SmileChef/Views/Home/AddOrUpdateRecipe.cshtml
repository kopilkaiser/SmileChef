@using SmileChef.ViewModels
@model RecipeViewModel

@using (Html.BeginForm("SaveRecipe", "Home", FormMethod.Post))
{
    @Html.HiddenFor(m => m.RecipeId)
    <div class="container">
        <div class="row align-items-center my-4">
            <div class="col-12 fs-5 pb-1">@Html.LabelFor(m => m.Name, "Recipe name")</div>
            <div class="col-12">@Html.TextBoxFor(m => m.Name, new { @class = "form-control", @placeholder = "Enter recipe name", id = "recipeName" })</div>
            <div class="col-12">@Html.ValidationMessageFor(m => m.Name)</div>
        </div>
        <div class="row">
            <h3 class="mt-2">Instructions</h3>
            <div class="col-12 mt-2">
                <button type="button" class="btn btn-primary w-auto" onclick="showAddInstructionModal()">Add Instruction</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Description</th>
                        <th>Duration (mins)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Instructions.Count; i++)
                    {
                        <tr>
                            <td>
                                @Html.HiddenFor(m => m.Instructions[i].OrderId)
                                @Html.HiddenFor(m => m.Instructions[i].InstructionId)
                                @Html.TextBoxFor(m => m.Instructions[i].OrderId, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.Instructions[i].OrderId)
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.Instructions[i].Description, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Instructions[i].Description)
                            </td>
                            <td>
                                <input type="number" class="form-control" name="Instructions[@i].Duration" value="@(Model.Instructions[i].Duration.HasValue ? Model.Instructions[i].Duration.Value.TotalMinutes : 0)" />
                                @Html.ValidationMessageFor(m => m.Instructions[i].Duration)
                            </td>
                            <td>
                               @*  @using (Html.BeginForm("DeleteInstruction", "Home", FormMethod.Post))
                                {
                                    @Html.HiddenFor(m => m.RecipeId)
                                    @Html.HiddenFor(m => m.Instructions[i].InstructionId)
                                    <button type="submit" class="btn btn-danger">Remove</button>
                                } *@
                                @Html.ActionLink("Remove", "DeleteInstruction", "Home", new { @recipeId = Model.RecipeId, @instructionId = Model.Instructions[i].InstructionId }, new { @class = "btn btn-danger" })
                            </td>
                        </tr>
                    }
                    @if (Model.Instructions.Count == 0)
                    {
                        <tr id="noInstructionsMessage">
                            <td colspan="4">No instructions. Click "Add Instruction" to create one.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row mt-3">
            <div class="col ps-0">
                <button class="btn btn-primary" type="submit">Save Recipe</button>
            </div>
        </div>
    </div>
}

<!-- Add Instruction Modal -->
<div class="modal fade" id="addInstructionModal" tabindex="-1" aria-labelledby="addInstructionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addInstructionModalLabel">Add Instruction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("AddInstruction", "Home", FormMethod.Post))
                {
                    @Html.Hidden("RecipeName", "", new { @id = "recipeNameHidden" })
                    @Html.Hidden("RecipeId", Model.RecipeId)
                    <div class="mb-3">
                        <label for="instructionDescription" class="form-label">Description</label>
                        <input type="text" class="form-control" name="Description" id="instructionDescription" placeholder="Enter instruction description">
                    </div>
                    <div class="mb-3">
                        <label for="instructionDuration" class="form-label">Duration (mins)</label>
                        <input type="number" class="form-control" name="Duration" id="instructionDuration" placeholder="Enter duration in minutes">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Instruction</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        function showAddInstructionModal() {
            var modal = new bootstrap.Modal(document.getElementById('addInstructionModal'));
            modal.show();
        }

        // Update hidden field when recipe name changes
        document.getElementById('recipeName').addEventListener('input', function () {
            document.getElementById('recipeNameHidden').value = this.value;
        });
    </script>
}
