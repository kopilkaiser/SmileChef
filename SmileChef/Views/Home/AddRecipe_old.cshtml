@using SmileChef.ViewModels
@model RecipeViewModel

@using (Html.BeginForm("AddRecipe", "Home", FormMethod.Post))
{
    <div class="container">
        <div class="row">
            <div class="col-3">@Html.LabelFor(m => m.Name)</div>
            <div class="col-8">@Html.TextBoxFor(m => m.Name)</div>
            <div class="col-12">@Html.ValidationMessageFor(m => m.Name)</div>
        </div>
        <div class="row">
            <h3>Instructions</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Description</th>
                        <th>Duration (mins)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="instructionList">
                    @for (int i = 0; i < Model.Instructions.Count; i++)
                    {
                        <tr>
                            <td>
                                @Html.HiddenFor(m => m.Instructions[i].OrderId)
                                @Html.TextBoxFor(m => m.Instructions[i].OrderId, new { @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.Instructions[i].OrderId)
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.Instructions[i].Description, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Instructions[i].Description)
                            </td>
                            <td>
                                <input type="number" class="form-control" name="Instructions[@i].Duration" value="@(Model.Instructions[i].Duration.HasValue ? Model.Instructions[i].Duration.Value.TotalMinutes : 0)" />
                                @Html.ValidationMessageFor(m => m.Instructions[i].Duration)
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" onclick="removeInstruction(this)">Remove</button>
                            </td>
                        </tr>
                    }
                    @if (Model.Instructions.Count == 0)
                    {
                        <tr id="noInstructionsMessage">
                            <td colspan="4">No instructions. Click "Add Instruction" to create one.</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" class="btn btn-primary" onclick="addInstruction()">Add Instruction</button>
        </div>
        <div class="row mt-3">
            <div class="col-12">
                <button class="btn btn-primary" type="submit">Add Recipe</button>
            </div>
        </div>
    </div>
}

<script>
    function addInstruction() {
        var instructionList = document.getElementById('instructionList');
        var rowCount = instructionList.querySelectorAll('tr:not(#noInstructionsMessage)').length; // Adjust to exclude the "No instructions" message row
        var orderIdValue = rowCount + 1; // OrderId should start at 1

        var newRow = instructionList.insertRow();
        newRow.innerHTML = `
                <td>
                    <input type="hidden" name="Instructions[` + rowCount + `].OrderId" value="` + orderIdValue + `" />
                    <input type="hidden" name="Instructions[` + rowCount + `].InstructionId" value="0" /> <!-- New instruction has ID 0 -->
                    <input type="hidden" name="Instructions[` + rowCount + `].IsRemoved" value="false" />
                    <input class="form-control" name="Instructions[` + rowCount + `].OrderId" type="text" value="` + orderIdValue + `" readonly />
                </td>
                <td>
                    <input class="form-control" name="Instructions[` + rowCount + `].Description" type="text" />
                </td>
                <td>
                    <input type="number" class="form-control" name="Instructions[` + rowCount + `].Duration" value="0" />
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeInstruction(this)">Remove</button>
                </td>
            `;

        // Hide the "No instructions" message
        var noInstructionsMessage = document.getElementById('noInstructionsMessage');
        if (noInstructionsMessage) {
            noInstructionsMessage.style.display = 'none';
        }

        // Ensure indices are sequential and start at 0
        updateInstructionIndices();
    }

    function removeInstruction(button) {
        var row = button.parentNode.parentNode;
        row.style.display = 'none';
        var isRemovedInput = row.querySelector('input[name$=".IsRemoved"]');
        if (isRemovedInput) {
            isRemovedInput.value = "true";
        }

        // Ensure indices are sequential and start at 0
        updateInstructionIndices();

        // If there are no instructions left, show the "No instructions" message
        var instructionList = document.getElementById('instructionList');
        if (instructionList.querySelectorAll('tr:not([style*="display: none"])').length === 0) { // Only the "No instructions" message row remains
            var noInstructionsMessage = document.getElementById('noInstructionsMessage');
            if (noInstructionsMessage) {
                noInstructionsMessage.style.display = '';
            }
        }
    }

    function updateInstructionIndices() {
        var instructionList = document.getElementById('instructionList');
        var rows = instructionList.querySelectorAll('tr:not(#noInstructionsMessage):not([style*="display: none"])');
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            row.querySelector('input[name^="Instructions["][name$="].OrderId"]').name = 'Instructions[' + i + '].OrderId';
            row.querySelector('input[name^="Instructions["][name$="].InstructionId"]').name = 'Instructions[' + i + '].InstructionId';
            row.querySelector('input[name^="Instructions["][name$="].Description"]').name = 'Instructions[' + i + '].Description';
            row.querySelector('input[name^="Instructions["][name$="].Duration"]').name = 'Instructions[' + i + '].Duration';
            row.querySelector('input[name^="Instructions["][name$="].IsRemoved"]').name = 'Instructions[' + i + '].IsRemoved';
            row.querySelector('input[name="Instructions[' + i + '].OrderId"]').value = i + 1;
            row.querySelector('input[readonly]').value = i + 1;
        }
    }
</script>
