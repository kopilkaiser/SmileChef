// <auto-generated />
using System;
using ChefApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SmileChef.Migrations
{
    [DbContext(typeof(ChefAppContext))]
    [Migration("20240913094948_updated_SupportMessage_and_Chef_And_AdminUser_Relationship")]
    partial class updated_SupportMessage_and_Chef_And_AdminUser_Relationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChefApp.Models.DbModels.Chef", b =>
                {
                    b.Property<int>("ChefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChefId"));

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<decimal?>("SubscriptionCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChefId");

                    b.HasIndex("UserId");

                    b.ToTable("Chefs");

                    b.HasData(
                        new
                        {
                            ChefId = 1,
                            AccountBalance = 10000m,
                            FirstName = "Gordon",
                            LastName = "Ramsay",
                            Rating = 3,
                            SubscriptionCost = 12.99m,
                            UserId = 1
                        },
                        new
                        {
                            ChefId = 2,
                            AccountBalance = 5500m,
                            FirstName = "Jamie",
                            LastName = "Oliver",
                            Rating = 1,
                            SubscriptionCost = 11.99m,
                            UserId = 2
                        },
                        new
                        {
                            ChefId = 3,
                            AccountBalance = 9000m,
                            FirstName = "Wolfgang",
                            LastName = "Puck",
                            Rating = 5,
                            SubscriptionCost = 5.99m,
                            UserId = 3
                        },
                        new
                        {
                            ChefId = 4,
                            AccountBalance = 15000m,
                            FirstName = "Alice",
                            LastName = "Waters",
                            Rating = 4,
                            SubscriptionCost = 6.99m,
                            UserId = 4
                        },
                        new
                        {
                            ChefId = 5,
                            AccountBalance = 8000m,
                            FirstName = "Thomas",
                            LastName = "Keller",
                            Rating = 2,
                            SubscriptionCost = 15.99m,
                            UserId = 5
                        },
                        new
                        {
                            ChefId = 6,
                            AccountBalance = 7000m,
                            FirstName = "Emeril",
                            LastName = "Lagasse",
                            Rating = 5,
                            SubscriptionCost = 10.99m,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("InstructionId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Instructions");

                    b.HasData(
                        new
                        {
                            InstructionId = 1,
                            Description = "Prepare beef",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 1
                        },
                        new
                        {
                            InstructionId = 2,
                            Description = "Wrap in puff pastry",
                            OrderId = 2,
                            RecipeId = 1
                        },
                        new
                        {
                            InstructionId = 3,
                            Description = "Bake",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            OrderId = 3,
                            RecipeId = 1
                        },
                        new
                        {
                            InstructionId = 4,
                            Description = "Cook pasta",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 2
                        },
                        new
                        {
                            InstructionId = 5,
                            Description = "Prepare sauce",
                            OrderId = 2,
                            RecipeId = 2
                        },
                        new
                        {
                            InstructionId = 6,
                            Description = "Combine and serve",
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            OrderId = 3,
                            RecipeId = 2
                        },
                        new
                        {
                            InstructionId = 7,
                            Description = "Prepare tuna",
                            OrderId = 1,
                            RecipeId = 3
                        },
                        new
                        {
                            InstructionId = 8,
                            Description = "Roll sushi",
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            OrderId = 2,
                            RecipeId = 3
                        },
                        new
                        {
                            InstructionId = 9,
                            Description = "Serve with soy sauce",
                            OrderId = 3,
                            RecipeId = 3
                        },
                        new
                        {
                            InstructionId = 10,
                            Description = "Prepare lentils",
                            OrderId = 1,
                            RecipeId = 4
                        },
                        new
                        {
                            InstructionId = 11,
                            Description = "Cook lentils",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 2,
                            RecipeId = 4
                        },
                        new
                        {
                            InstructionId = 12,
                            Description = "Serve hot",
                            OrderId = 3,
                            RecipeId = 4
                        },
                        new
                        {
                            InstructionId = 13,
                            Description = "Season chicken",
                            OrderId = 1,
                            RecipeId = 5
                        },
                        new
                        {
                            InstructionId = 14,
                            Description = "Roast chicken",
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            OrderId = 2,
                            RecipeId = 5
                        },
                        new
                        {
                            InstructionId = 15,
                            Description = "Serve with vegetables",
                            OrderId = 3,
                            RecipeId = 5
                        },
                        new
                        {
                            InstructionId = 16,
                            Description = "Prepare bananas",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 6
                        },
                        new
                        {
                            InstructionId = 17,
                            Description = "Cook with butter and sugar",
                            OrderId = 2,
                            RecipeId = 6
                        },
                        new
                        {
                            InstructionId = 18,
                            Description = "Serve with ice cream",
                            OrderId = 3,
                            RecipeId = 6
                        },
                        new
                        {
                            InstructionId = 19,
                            Description = "Cook Mince Beef",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 7
                        },
                        new
                        {
                            InstructionId = 20,
                            Description = "Cook Tomato Sauce",
                            Duration = new TimeSpan(0, 0, 25, 0, 0),
                            OrderId = 2,
                            RecipeId = 7
                        },
                        new
                        {
                            InstructionId = 21,
                            Description = "Boil Sphagetti",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 3,
                            RecipeId = 7
                        },
                        new
                        {
                            InstructionId = 22,
                            Description = "Mix Cooked Beef, Suace, and Sphagetti",
                            OrderId = 4,
                            RecipeId = 7
                        },
                        new
                        {
                            InstructionId = 23,
                            Description = "Cook Chicken Soup",
                            Duration = new TimeSpan(0, 0, 35, 0, 0),
                            OrderId = 1,
                            RecipeId = 8
                        },
                        new
                        {
                            InstructionId = 24,
                            Description = "Add chopped Mushroom, Cillantro, Corriander",
                            Duration = new TimeSpan(0, 0, 2, 0, 0),
                            OrderId = 2,
                            RecipeId = 8
                        },
                        new
                        {
                            InstructionId = 25,
                            Description = "Simmer the ingredients",
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            OrderId = 3,
                            RecipeId = 8
                        },
                        new
                        {
                            InstructionId = 26,
                            Description = "Plate the soup with sprinkled corriander and chillies",
                            OrderId = 4,
                            RecipeId = 8
                        },
                        new
                        {
                            InstructionId = 27,
                            Description = "Prepare gourmet beef",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 9
                        },
                        new
                        {
                            InstructionId = 28,
                            Description = "Wrap with prosciutto and puff pastry",
                            OrderId = 2,
                            RecipeId = 9
                        },
                        new
                        {
                            InstructionId = 29,
                            Description = "Bake to perfection",
                            Duration = new TimeSpan(0, 0, 25, 0, 0),
                            OrderId = 3,
                            RecipeId = 9
                        },
                        new
                        {
                            InstructionId = 30,
                            Description = "Prepare truffle stock",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 10
                        },
                        new
                        {
                            InstructionId = 31,
                            Description = "Cook Arborio rice",
                            Duration = new TimeSpan(0, 0, 18, 0, 0),
                            OrderId = 2,
                            RecipeId = 10
                        },
                        new
                        {
                            InstructionId = 32,
                            Description = "Add truffle and parmesan",
                            OrderId = 3,
                            RecipeId = 10
                        },
                        new
                        {
                            InstructionId = 33,
                            Description = "Prepare sushi-grade tuna",
                            OrderId = 1,
                            RecipeId = 11
                        },
                        new
                        {
                            InstructionId = 34,
                            Description = "Roll with sushi rice and nori",
                            Duration = new TimeSpan(0, 0, 8, 0, 0),
                            OrderId = 2,
                            RecipeId = 11
                        },
                        new
                        {
                            InstructionId = 35,
                            Description = "Garnish with caviar",
                            OrderId = 3,
                            RecipeId = 11
                        },
                        new
                        {
                            InstructionId = 36,
                            Description = "Chop organic vegetables",
                            Duration = new TimeSpan(0, 0, 12, 0, 0),
                            OrderId = 1,
                            RecipeId = 12
                        },
                        new
                        {
                            InstructionId = 37,
                            Description = "Prepare vinaigrette dressing",
                            OrderId = 2,
                            RecipeId = 12
                        },
                        new
                        {
                            InstructionId = 38,
                            Description = "Toss and serve fresh",
                            OrderId = 3,
                            RecipeId = 12
                        },
                        new
                        {
                            InstructionId = 39,
                            Description = "Prepare foie gras",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 13
                        },
                        new
                        {
                            InstructionId = 40,
                            Description = "Cook terrine with truffles",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            OrderId = 2,
                            RecipeId = 13
                        },
                        new
                        {
                            InstructionId = 41,
                            Description = "Serve with toasted brioche",
                            OrderId = 3,
                            RecipeId = 13
                        },
                        new
                        {
                            InstructionId = 42,
                            Description = "Mix Emeril's special spices",
                            OrderId = 1,
                            RecipeId = 14
                        },
                        new
                        {
                            InstructionId = 43,
                            Description = "Marinate the meat",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            OrderId = 2,
                            RecipeId = 14
                        },
                        new
                        {
                            InstructionId = 44,
                            Description = "Cook to desired doneness",
                            OrderId = 3,
                            RecipeId = 14
                        },
                        new
                        {
                            InstructionId = 45,
                            Description = "Prepare pizza dough",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 15
                        },
                        new
                        {
                            InstructionId = 46,
                            Description = "Add tomato sauce and mozzarella",
                            OrderId = 2,
                            RecipeId = 15
                        },
                        new
                        {
                            InstructionId = 47,
                            Description = "Bake in oven",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 3,
                            RecipeId = 15
                        },
                        new
                        {
                            InstructionId = 48,
                            Description = "Cook seafood",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 16
                        },
                        new
                        {
                            InstructionId = 49,
                            Description = "Prepare paella rice",
                            OrderId = 2,
                            RecipeId = 16
                        },
                        new
                        {
                            InstructionId = 50,
                            Description = "Combine seafood with rice",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            OrderId = 3,
                            RecipeId = 16
                        },
                        new
                        {
                            InstructionId = 51,
                            Description = "Chop vegetables",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 17
                        },
                        new
                        {
                            InstructionId = 52,
                            Description = "Stir fry in wok",
                            OrderId = 2,
                            RecipeId = 17
                        },
                        new
                        {
                            InstructionId = 53,
                            Description = "Serve with soy sauce",
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            OrderId = 3,
                            RecipeId = 17
                        },
                        new
                        {
                            InstructionId = 54,
                            Description = "Prepare lamb shank",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 18
                        },
                        new
                        {
                            InstructionId = 55,
                            Description = "Slow cook for 4 hours",
                            Duration = new TimeSpan(0, 4, 0, 0, 0),
                            OrderId = 2,
                            RecipeId = 18
                        },
                        new
                        {
                            InstructionId = 56,
                            Description = "Serve with mashed potatoes",
                            OrderId = 3,
                            RecipeId = 18
                        },
                        new
                        {
                            InstructionId = 57,
                            Description = "Prepare roux",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 19
                        },
                        new
                        {
                            InstructionId = 58,
                            Description = "Add seafood and sausage",
                            OrderId = 2,
                            RecipeId = 19
                        },
                        new
                        {
                            InstructionId = 59,
                            Description = "Simmer and serve over rice",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            OrderId = 3,
                            RecipeId = 19
                        },
                        new
                        {
                            InstructionId = 60,
                            Description = "Prepare lobster",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 20
                        },
                        new
                        {
                            InstructionId = 61,
                            Description = "Cook thermidor sauce",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 2,
                            RecipeId = 20
                        },
                        new
                        {
                            InstructionId = 62,
                            Description = "Bake lobster with sauce",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            OrderId = 3,
                            RecipeId = 20
                        },
                        new
                        {
                            InstructionId = 63,
                            Description = "Prepare blini batter",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 21
                        },
                        new
                        {
                            InstructionId = 64,
                            Description = "Cook blinis",
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            OrderId = 2,
                            RecipeId = 21
                        },
                        new
                        {
                            InstructionId = 65,
                            Description = "Top with caviar",
                            OrderId = 3,
                            RecipeId = 21
                        },
                        new
                        {
                            InstructionId = 66,
                            Description = "Prepare wagyu beef",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 22
                        },
                        new
                        {
                            InstructionId = 67,
                            Description = "Roll sushi with wagyu and rice",
                            OrderId = 2,
                            RecipeId = 22
                        },
                        new
                        {
                            InstructionId = 68,
                            Description = "Serve with soy sauce",
                            OrderId = 3,
                            RecipeId = 22
                        },
                        new
                        {
                            InstructionId = 69,
                            Description = "Prepare mushroom soup base",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 1,
                            RecipeId = 23
                        },
                        new
                        {
                            InstructionId = 70,
                            Description = "Add truffle oil and cream",
                            OrderId = 2,
                            RecipeId = 23
                        },
                        new
                        {
                            InstructionId = 71,
                            Description = "Simmer and serve",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 3,
                            RecipeId = 23
                        },
                        new
                        {
                            InstructionId = 72,
                            Description = "Prepare duck",
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            OrderId = 1,
                            RecipeId = 24
                        },
                        new
                        {
                            InstructionId = 73,
                            Description = "Cook orange sauce",
                            OrderId = 2,
                            RecipeId = 24
                        },
                        new
                        {
                            InstructionId = 74,
                            Description = "Serve duck with sauce",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            OrderId = 3,
                            RecipeId = 24
                        },
                        new
                        {
                            InstructionId = 75,
                            Description = "Prepare oysters",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            OrderId = 1,
                            RecipeId = 25
                        },
                        new
                        {
                            InstructionId = 76,
                            Description = "Top with Rockefeller sauce",
                            OrderId = 2,
                            RecipeId = 25
                        },
                        new
                        {
                            InstructionId = 77,
                            Description = "Bake oysters",
                            Duration = new TimeSpan(0, 0, 8, 0, 0),
                            OrderId = 3,
                            RecipeId = 25
                        });
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId");

                    b.HasIndex("ChefId");

                    b.ToTable("Recipes");

                    b.HasDiscriminator<string>("RecipeType").HasValue("Basic");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            ChefId = 1,
                            ImageUrl = "recipe1.jpeg",
                            Name = "Beef Wellington",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 2,
                            ChefId = 2,
                            ImageUrl = "recipe2.jpeg",
                            Name = "Pasta Carbonara",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 3,
                            ChefId = 3,
                            ImageUrl = "recipe3.jpeg",
                            Name = "Spicy Tuna Rolls",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 4,
                            ChefId = 4,
                            ImageUrl = "recipe4.jpeg",
                            Name = "Lentil Soup",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 5,
                            ChefId = 5,
                            ImageUrl = "recipe5.jpeg",
                            Name = "Roast Chicken",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 6,
                            ChefId = 6,
                            ImageUrl = "recipe6.jpeg",
                            Name = "Bananas Foster",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 7,
                            ChefId = 1,
                            ImageUrl = "recipe7.jpeg",
                            Name = "Beef Bolognese",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 8,
                            ChefId = 1,
                            ImageUrl = "recipe8.jpeg",
                            Name = "Chicken Mushroom Soup",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 15,
                            ChefId = 2,
                            ImageUrl = "recipe9.jpeg",
                            Name = "Classic Margherita Pizza",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 16,
                            ChefId = 3,
                            ImageUrl = "recipe10.jpeg",
                            Name = "Seafood Paella",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 17,
                            ChefId = 4,
                            ImageUrl = "recipe11.jpeg",
                            Name = "Vegetarian Stir Fry",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 18,
                            ChefId = 5,
                            ImageUrl = "recipe12.jpeg",
                            Name = "Slow Cooked Lamb Shank",
                            RecipeType = "Basic"
                        },
                        new
                        {
                            RecipeId = 19,
                            ChefId = 6,
                            ImageUrl = "recipe13.jpeg",
                            Name = "Creole Gumbo",
                            RecipeType = "Basic"
                        });
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnOrder(4);

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("SubscriberId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(5);

                    b.HasKey("SubscriptionId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            SubscriptionId = 1,
                            Amount = 99.99m,
                            PublisherId = 1,
                            SubscriberId = 3,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            SubscriptionId = 2,
                            Amount = 99.99m,
                            PublisherId = 1,
                            SubscriberId = 4,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            SubscriptionId = 3,
                            Amount = 99.99m,
                            PublisherId = 1,
                            SubscriberId = 5,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            SubscriptionId = 4,
                            Amount = 199.99m,
                            PublisherId = 2,
                            SubscriberId = 4,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Yearly"
                        },
                        new
                        {
                            SubscriptionId = 5,
                            Amount = 199.99m,
                            PublisherId = 2,
                            SubscriberId = 5,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Yearly"
                        },
                        new
                        {
                            SubscriptionId = 6,
                            Amount = 199.99m,
                            PublisherId = 2,
                            SubscriberId = 6,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Yearly"
                        },
                        new
                        {
                            SubscriptionId = 7,
                            Amount = 50.00m,
                            PublisherId = 2,
                            SubscriberId = 1,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            SubscriptionId = 8,
                            Amount = 75.00m,
                            PublisherId = 3,
                            SubscriberId = 1,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            SubscriptionId = 9,
                            Amount = 60.00m,
                            PublisherId = 4,
                            SubscriberId = 1,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            SubscriptionId = 10,
                            Amount = 80.00m,
                            PublisherId = 5,
                            SubscriberId = 1,
                            SubscriptionDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            SubscriptionType = "Monthly"
                        });
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.NotifySubscribers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Notified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("NotifySubscribers");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("ChefId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.OrderLine", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLineId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("RecipeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RecipeId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.RecipeBookmark", b =>
                {
                    b.Property<int>("RecipeBookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeBookmarkId"));

                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("RecipeBookmarkId");

                    b.HasIndex("ChefId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeBookmarks");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OperatingTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RestaurantId");

                    b.HasIndex("ChefId")
                        .IsUnique();

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            ChefId = 1,
                            Lat = 51.407856342781869,
                            Lng = -0.29675218001524584,
                            Location = "Located in Kingston Upon Thames",
                            OperatingTime = "09:00 - 17:00",
                            Phone = "+447745566123",
                            Title = "Gordon Restaurant"
                        },
                        new
                        {
                            RestaurantId = 2,
                            ChefId = 2,
                            Lat = 51.48230385097871,
                            Lng = 0.16090573471658554,
                            Location = "Located in Erith",
                            OperatingTime = "09:00 - 18:00",
                            Phone = "+447711223334",
                            Title = "Oliver Cake shop"
                        },
                        new
                        {
                            RestaurantId = 3,
                            ChefId = 3,
                            Lat = 51.509680652979817,
                            Lng = -0.30602189042240918,
                            Location = "Located in Ealing",
                            OperatingTime = "09:00 - 15:30",
                            Phone = "+447733332222",
                            Title = "Wolfgang Barbeque Zone"
                        },
                        new
                        {
                            RestaurantId = 4,
                            ChefId = 4,
                            Lat = 51.411336229653351,
                            Lng = 0.014899074168950227,
                            Location = "Located in Bromley",
                            OperatingTime = "09:00 - 16:30",
                            Phone = "+447799991111",
                            Title = "Alice Supermarket"
                        },
                        new
                        {
                            RestaurantId = 5,
                            ChefId = 5,
                            Lat = 51.614742280283551,
                            Lng = -0.25151937991059076,
                            Location = "Located in Edgeware",
                            OperatingTime = "09:00 - 18:30",
                            Phone = "+447723456789",
                            Title = "Thomas Yummy Restaurant"
                        },
                        new
                        {
                            RestaurantId = 6,
                            ChefId = 6,
                            Lat = 51.552449586568827,
                            Lng = 0.072577293612278118,
                            Location = "Located in Illford",
                            OperatingTime = "09:00 - 18:30",
                            Phone = "+447766662345",
                            Title = "Emeril Dirty Icecreams"
                        });
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.SupportMessage", b =>
                {
                    b.Property<int>("SupportMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportMessageId"));

                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SupportMessageId");

                    b.HasIndex("ChefId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "gordan@gmail.com",
                            Password = "123"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "jamie@gmail.com",
                            Password = "123"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "wolfgang@gmail.com",
                            Password = "123"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "alice@gmail.com",
                            Password = "123"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "thomas@gmail.com",
                            Password = "123"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "emeril@gmail.com",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.PremiumRecipe", b =>
                {
                    b.HasBaseType("ChefApp.Models.DbModels.Recipe");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.ToTable("Recipes");

                    b.HasDiscriminator().HasValue("Premium");

                    b.HasData(
                        new
                        {
                            RecipeId = 9,
                            ChefId = 1,
                            ImageUrl = "recipe2.jpeg",
                            Name = "Gourmet Beef Wellington",
                            RecipeType = "Premium",
                            Price = 49.99f
                        },
                        new
                        {
                            RecipeId = 10,
                            ChefId = 2,
                            ImageUrl = "recipe3.jpeg",
                            Name = "Truffle Risotto",
                            RecipeType = "Premium",
                            Price = 39.99f
                        },
                        new
                        {
                            RecipeId = 11,
                            ChefId = 3,
                            ImageUrl = "recipe4.jpeg",
                            Name = "Sushi Deluxe",
                            RecipeType = "Premium",
                            Price = 29.99f
                        },
                        new
                        {
                            RecipeId = 12,
                            ChefId = 4,
                            ImageUrl = "recipe5.jpeg",
                            Name = "Organic Farm-to-Table Salad",
                            RecipeType = "Premium",
                            Price = 19.99f
                        },
                        new
                        {
                            RecipeId = 13,
                            ChefId = 5,
                            ImageUrl = "recipe6.jpeg",
                            Name = "Foie Gras Terrine",
                            RecipeType = "Premium",
                            Price = 59.99f
                        },
                        new
                        {
                            RecipeId = 14,
                            ChefId = 6,
                            ImageUrl = "recipe7.jpeg",
                            Name = "Emeril's Essence Special",
                            RecipeType = "Premium",
                            Price = 24.99f
                        },
                        new
                        {
                            RecipeId = 20,
                            ChefId = 1,
                            ImageUrl = "recipe8.jpeg",
                            Name = "Lobster Thermidor",
                            RecipeType = "Premium",
                            Price = 69.99f
                        },
                        new
                        {
                            RecipeId = 21,
                            ChefId = 2,
                            ImageUrl = "recipe9.jpeg",
                            Name = "Caviar Blinis",
                            RecipeType = "Premium",
                            Price = 99.99f
                        },
                        new
                        {
                            RecipeId = 22,
                            ChefId = 3,
                            ImageUrl = "recipe10.jpeg",
                            Name = "Wagyu Beef Sushi",
                            RecipeType = "Premium",
                            Price = 89.99f
                        },
                        new
                        {
                            RecipeId = 23,
                            ChefId = 4,
                            ImageUrl = "recipe11.jpeg",
                            Name = "Truffle Mushroom Soup",
                            RecipeType = "Premium",
                            Price = 34.99f
                        },
                        new
                        {
                            RecipeId = 24,
                            ChefId = 5,
                            ImageUrl = "recipe14.jpeg",
                            Name = "Duck à l'Orange",
                            RecipeType = "Premium",
                            Price = 54.99f
                        },
                        new
                        {
                            RecipeId = 25,
                            ChefId = 6,
                            ImageUrl = "recipe15.jpeg",
                            Name = "Oysters Rockefeller",
                            RecipeType = "Premium",
                            Price = 44.99f
                        });
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Chef", b =>
                {
                    b.HasOne("SmileChef.Models.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Instruction", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Recipe", "Recipe")
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Recipe", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Chef")
                        .WithMany("Recipes")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Subscription", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Publisher")
                        .WithMany("PublishedSubscriptions")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChefApp.Models.DbModels.Chef", "Subscriber")
                        .WithMany("SubscribedTo")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.NotifySubscribers", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChefApp.Models.DbModels.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChefApp.Models.DbModels.Chef", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Recipe");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Order", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Chef")
                        .WithMany("Orders")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.OrderLine", b =>
                {
                    b.HasOne("SmileChef.Models.DbModels.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChefApp.Models.DbModels.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.RecipeBookmark", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Chef")
                        .WithMany("RecipeBookmarks")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChefApp.Models.DbModels.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Restaurant", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Chef")
                        .WithOne("Restaurant")
                        .HasForeignKey("SmileChef.Models.DbModels.Restaurant", "ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Review", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChefApp.Models.DbModels.Chef", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.SupportMessage", b =>
                {
                    b.HasOne("ChefApp.Models.DbModels.Chef", "Sender")
                        .WithMany("SupportMessages")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmileChef.Models.DbModels.User", "AdminUser")
                        .WithMany("HandledMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdminUser");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Chef", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PublishedSubscriptions");

                    b.Navigation("RecipeBookmarks");

                    b.Navigation("Recipes");

                    b.Navigation("Restaurant")
                        .IsRequired();

                    b.Navigation("SubscribedTo");

                    b.Navigation("SupportMessages");
                });

            modelBuilder.Entity("ChefApp.Models.DbModels.Recipe", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("SmileChef.Models.DbModels.User", b =>
                {
                    b.Navigation("HandledMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
